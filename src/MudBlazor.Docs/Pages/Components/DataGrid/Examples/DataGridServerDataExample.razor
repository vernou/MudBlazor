@using System.Net.Http.Json
@using MudBlazor.Examples.Data.Models
@using System.Web
@using System.Globalization
@namespace MudBlazor.Docs.Examples
@inject HttpClient httpClient

<MudDataGrid T="Element" ServerData="GetDataFromApi" FilterMode="DataGridFilterMode.ColumnFilterMenu" SortMode="SortMode.Single">
    <Columns>
        <PropertyColumn Property="x => x.Number" Title="Nr" Filterable="false" Sortable="false" />
        <PropertyColumn Property="x => x.Sign" Filterable="false" Sortable="false" />
        <PropertyColumn Property="x => x.Name" Filterable="true" Sortable="true" >
@*             <FilterTemplate>
                @{
                    var filter = new Filter<Element>(
                    context.FilterDefinition.Column.DataGrid,
                    context.FilterDefinition,
                    context.FilterDefinition.Column
                    );
                }
                <MudTextField T="string" Class="filter-input" FullWidth="true" Margin="@Margin.Dense"
                              Immediate="true" Value="@filter._valueString" ValueChanged="@filter.StringValueChanged" />
            </FilterTemplate> *@
        </PropertyColumn>
        <PropertyColumn Property="x => x.Position" Filterable="false" Sortable="false" />
        <PropertyColumn Property="x => x.Molar" Title="Molar mass" Filterable="false" Sortable="false" />
        <PropertyColumn Property="x => x.Group" Title="Category" Filterable="false" Sortable="false" />
    </Columns>
    <PagerContent>
        <MudDataGridPager T="Element" />
    </PagerContent>
</MudDataGrid>

@code {
    private IEnumerable<Element> Elements = new List<Element>();

    async Task<GridData<Element>> GetDataFromApi(GridState<Element> state)
    {
        var query = HttpUtility.ParseQueryString(string.Empty);
        foreach(var filter in state.FilterDefinitions)
        {
            if(filter.Column.PropertyName == nameof(Element.Name) && filter.Value != null)
            {
                query["search"] = filter.Value.ToString();
            }
        }

        foreach(var sort in state.SortDefinitions)
        {
            if(sort.SortBy == nameof(Element.Name))
            {
                query["sortBy"] = "name";
                query["sortDirection"] = sort.Descending ? "Descending" : "Ascending";
            }
        }

        if(state.Page > 0)
        {
            query["skip"] = (state.Page * state.PageSize).ToString();
        }

        query["take"] = state.PageSize.ToString();

        try
        {
            // return new GridData<Element>
            // {
            //     TotalItems = 100,
            //     Items = await httpClient.GetFromJsonAsync<List<Element>>("webapi/periodictable")
            // };
            return await httpClient.GetFromJsonAsync<GridData<Element>>("webapi/periodictable-advanced-search?" + query);
        }
        catch
        {
            return new();
        }

    }
}
